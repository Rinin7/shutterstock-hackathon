/**
 * shutterstock
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthorizeResponse', 'model/OauthAccessTokenResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthorizeResponse'), require('../model/OauthAccessTokenResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Shutterstock) {
      root.Shutterstock = {};
    }
    root.Shutterstock.OauthApi = factory(root.Shutterstock.ApiClient, root.Shutterstock.AuthorizeResponse, root.Shutterstock.OauthAccessTokenResponse);
  }
}(this, function(ApiClient, AuthorizeResponse, OauthAccessTokenResponse) {
  'use strict';

  /**
   * Oauth service.
   * @module api/OauthApi
   * @version 1.0.0
   */

  /**
   * Constructs a new OauthApi. 
   * @alias module:api/OauthApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Authorize applications
     * This endpoint returns a redirect URI (in the &#39;Location&#39; header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization.
     * @param {String} clientId Client ID (Consumer Key) of your application
     * @param {String} redirectUri The callback URI to send the request to after authorization; must use a host name that is registered with your application
     * @param {module:model/String} responseType Type of temporary authorization code that will be used to generate an access code; the only valid value is &#39;code&#39;
     * @param {String} state Unique value used by the calling app to verify the request
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.realm User type to be authorized (usually &#39;customer&#39;) (default to customer)
     * @param {String} opts.scope Comma-separated list of scopes to be authorized (default to user.view)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.authorizeWithHttpInfo = function(clientId, redirectUri, responseType, state, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorize");
      }

      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling authorize");
      }

      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling authorize");
      }

      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling authorize");
      }


      var pathParams = {
      };
      var queryParams = {
        'client_id': clientId,
        'realm': opts['realm'],
        'redirect_uri': redirectUri,
        'response_type': responseType,
        'scope': opts['scope'],
        'state': state,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v2/oauth/authorize', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Authorize applications
     * This endpoint returns a redirect URI (in the &#39;Location&#39; header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization.
     * @param {String} clientId Client ID (Consumer Key) of your application
     * @param {String} redirectUri The callback URI to send the request to after authorization; must use a host name that is registered with your application
     * @param {module:model/String} responseType Type of temporary authorization code that will be used to generate an access code; the only valid value is &#39;code&#39;
     * @param {String} state Unique value used by the calling app to verify the request
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.realm User type to be authorized (usually &#39;customer&#39;) (default to customer)
     * @param {String} opts.scope Comma-separated list of scopes to be authorized (default to user.view)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.authorize = function(clientId, redirectUri, responseType, state, opts) {
      return this.authorizeWithHttpInfo(clientId, redirectUri, responseType, state, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get access tokens
     * This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientId Client ID (Consumer Key) of your application
     * @param {String} opts.clientSecret Client Secret (Consumer Secret) of your application
     * @param {String} opts.code Response code from the /oauth/authorize flow; required if grant_type&#x3D;authorization_code
     * @param {module:model/String} opts.grantType Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
     * @param {module:model/String} opts.realm User type to be authorized (usually &#39;consumer&#39;) (default to customer)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OauthAccessTokenResponse} and HTTP response
     */
    this.createAccessTokenWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret'],
        'code': opts['code'],
        'grant_type': opts['grantType'],
        'realm': opts['realm']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = OauthAccessTokenResponse;

      return this.apiClient.callApi(
        '/v2/oauth/access_token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get access tokens
     * This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientId Client ID (Consumer Key) of your application
     * @param {String} opts.clientSecret Client Secret (Consumer Secret) of your application
     * @param {String} opts.code Response code from the /oauth/authorize flow; required if grant_type&#x3D;authorization_code
     * @param {module:model/String} opts.grantType Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
     * @param {module:model/String} opts.realm User type to be authorized (usually &#39;consumer&#39;) (default to customer)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OauthAccessTokenResponse}
     */
    this.createAccessToken = function(opts) {
      return this.createAccessTokenWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
